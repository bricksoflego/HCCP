@page "/audit"
@using Models

<h1>Inventory Audit</h1>
<div style="display:inline; position:relative;top:-19px">
    <div style="display:inline-block;margin-right:.75em;"><h2>Inventory Scan Type</h2></div>
    <div style="display:inline-block; height:25px;"><MudSwitch @bind-Value="Switch" Color="Color.Info" UncheckedColor="Color.Warning" Converter="@(new CustomStringToBoolConverter())">@Switch</MudSwitch></div>
</div>
<h3>Hardware</h3>
<MudTable Items="@inventory.Hardwares">
    <HeaderContent>
        <MudTh>Asset Name</MudTh>
        <MudTh>Model Number</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>On-Hand</MudTh>
        <MudTh>In-Use</MudTh>
        <MudTh>Total</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Asset Name">@context.Name</MudTd>
        <MudTd DataLabel="Model Number">@context.ModelNumber</MudTd>
        <MudTd DataLabel="Brand">@context.BrandName</MudTd>
        <MudTd DataLabel="On-Hand">@context.OnHand</MudTd>
        <MudTd DataLabel="In-Use">@context.InUse</MudTd>
        <MudTd DataLabel="Total">@CalculateTotal(context.InUse, context.OnHand)</MudTd>
    </RowTemplate>
</MudTable>

<h3>Cables</h3>
<MudTable Items="@inventory.Cables">
    <HeaderContent>
        <MudTh>Asset Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>On-Hand</MudTh>
        <MudTh>In-Use</MudTh>
        <MudTh>Total</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Asset Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.CableType</MudTd>
        <MudTd DataLabel="Brand">@context.BrandName</MudTd>
        <MudTd DataLabel="On-Hand">@context.OnHand</MudTd>
        <MudTd DataLabel="In-Use">@context.InUse</MudTd>
        <MudTd DataLabel="Total">@CalculateTotal(context.InUse, context.OnHand)</MudTd>
    </RowTemplate>
</MudTable>

<h3>Components</h3>
<MudTable Items="@inventory.Cables">
    <HeaderContent>
        <MudTh>Asset Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>On-Hand</MudTh>
        <MudTh>In-Use</MudTh>
        <MudTh>Total</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Asset Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.CableType</MudTd>
        <MudTd DataLabel="Brand">@context.BrandName</MudTd>
        <MudTd DataLabel="On-Hand">@context.OnHand</MudTd>
        <MudTd DataLabel="In-Use">@context.InUse</MudTd>
        <MudTd DataLabel="Total">@CalculateTotal(context.InUse, context.OnHand)</MudTd>
    </RowTemplate>
</MudTable>
@if (inventory.Ecomponents != null && inventory.Ecomponents.Count > 0)
{
    foreach (var component in inventory.Ecomponents)
    {
        <p>@component.Name</p>
    }
}
else
{
    <p>No components found</p>
}

<h3>Peripherals</h3>
<MudTable Items="@inventory.Cables">
    <HeaderContent>
        <MudTh>Asset Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>On-Hand</MudTh>
        <MudTh>In-Use</MudTh>
        <MudTh>Total</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Asset Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.CableType</MudTd>
        <MudTd DataLabel="Brand">@context.BrandName</MudTd>
        <MudTd DataLabel="On-Hand">@context.OnHand</MudTd>
        <MudTd DataLabel="In-Use">@context.InUse</MudTd>
        <MudTd DataLabel="Total">@CalculateTotal(context.InUse, context.OnHand)</MudTd>
    </RowTemplate>
</MudTable>

@if (inventory.Peripherals != null && inventory.Peripherals.Count > 0)
{
    foreach (var peripheral in inventory.Peripherals)
    {
        <p>@peripheral.Name</p>
    }
}
else
{
    <p>No peripherals found</p>
}

@code {
    int CalculateTotal(int onHand, int inUse) => onHand + inUse;
    public string Switch { get; set; } = "On-Hand";
    public class CustomStringToBoolConverter : BoolConverter<string>
    {

        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private string TrueString = "In-Use";
        private string FalseString = "On-Hand";
        private string NullString = "Get Help";

        private string OnGet(bool? value)
        {
            try
            {
                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError("Conversion error: " + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                else
                    return null;
            }
            catch (FormatException e)
            {
                UpdateSetError("Conversion error: " + e.Message);
                return null;
            }
        }

    }
}