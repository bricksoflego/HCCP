@using BlueDragon.Data
@using BlueDragon.Models
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs=12 sm=6>
        <MudCard Style="border:1px solid black; padding:10px;">
            <MudCardHeader Class="cardHeader">
                <MudText Class="cardHeaderText" Inline="true">Audit Input </MudText>
                <MudSpacer />
                <MudText Class="cardHeaderLabel" Inline="true">Options:</MudText>
                <MudSwitch Class="switch-inline-block"
                           Value="@IncrementSwitchedOn"
                           Color="Color.Info"
                           UncheckedColor="Color.Warning"
                           ValueChanged="@((bool value)=>OnIncrementSwitchChanged(value))">
                    @IncrementSwitchText
                </MudSwitch>
                <MudSwitch Class="switch-inline-block"
                           Value="@AutoScanSwitchedOn"
                           Color="Color.Info"
                           UncheckedColor="Color.Warning"
                           ValueChanged="@((bool value)=>OnAutoScanSwitchChanged(value))">
                    @AutoScanSwitchText
                </MudSwitch>
            </MudCardHeader>
            <MudElement Class="scanData" Style="display:inline;">
                <MudText Inline="true"><strong>Name: </strong>@ItemName | </MudText>
                <MudText Inline="true"><strong>Type: </strong>@ItemType | </MudText>
                @*<MudText Inline="true"><strong>Count: </strong>@ItemCount | </MudText>*@
                <MudText Inline="true"><strong>Length: </strong>@ItemLength | </MudText>
                <MudText Inline="true"><strong>Date: </strong>@ItemDate</MudText>
            </MudElement>
            <MudDivider />
            <LineBreak />
            <MudTextField T="string" InputId="barcode"
                          ValueChanged="@(context => OnBarcodeChanged(context))"
                          Immediate="true"
                          MaxLength="13"
                          Label="Barcode"
                          Style="width:13em"
                          @ref="barcodeField">
            </MudTextField>
            <LineBreak />
            <MudElement Style=@ManualScanVisibility>
                <MudTextField T="int?" InputId="barcodeCount"
                              ValueChanged="@(count => OnBarcodeCountChanged(count))"
                              Immediate="true"
                              Label="Count"
                              Style="width:3em"
                              @ref="barcodeCountField">
                </MudTextField>
                <LineBreak />
                <MudCardActions>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               Disabled="@enterButtonDisabled"
                               OnClick="()=>UpdateItemCountManual(item)">
                        Enter
                    </MudButton>
                </MudCardActions>
            </MudElement>
        </MudCard>
    </MudItem>
    <MudItem xs=12 sm=6>
        <MudCard Style="border:1px solid black; padding:10px;">
            <MudCardHeader Class="cardHeader">
                <MudText Class="cardHeaderText" Inline="true">Scan Results</MudText>
            </MudCardHeader>
            <MudSimpleTable Style="overflow-x: auto;">
                <thead>
                    <tr>
                        @foreach (var h in headings)
                        {
                            <th>@h</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in AuditList)
                    {
                        <tr>
                            <td>
                                @row.FullBarcode
                            </td>
                            <td>
                                @row.Count
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        </MudCard>
    </MudItem>
</MudGrid>
<div>
    <p>Test Code</p>
    <img src="/images/barcode.svg" />
</div>
@code {
    private int BarcodeCount { get; set; } = 0;
    private string ItemName { get; set; } = string.Empty;
    private string ItemType { get; set; } = string.Empty;
    private string ItemLength { get; set; } = string.Empty;
    private string ItemDate { get; set; } = "NA";
    private bool enterButtonDisabled = true;
    private MudTextField<string>? barcodeField;
    private MudTextField<int?>? barcodeCountField;
    private string IncrementSwitchText = "Increment";
    private string AutoScanSwitchText = "Auto Scan";
    private bool IncrementSwitchedOn = true;
    private bool AutoScanSwitchedOn = false;
    private List<BarcodeInformation> AuditList = new();
    private BarcodeInformation item = new();
    string[] headings = { "Barcode", "Count" };

    // HIDES THE MANUAL SCAN TO PREVENT ACCIDENTAL INPUT
    private string ManualScanVisibility =>
        AutoScanSwitchedOn ? "display: none;" : "display: block;";

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // SET FOCUS ON THE BARCODE FIELD AFTER THE COMPONENT IS FIRST RENDERED
        // ALSO INITIALIZE THE OTHER FIELDS
        if (firstRender && barcodeField != null)
        {
            barcodeCountField!.Value = null;
            await barcodeCountField.SetText(null); // CLEAR THE INPUT FIELD
            await barcodeField.FocusAsync();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="barcode"></param>
    /// <returns></returns>
    private async Task OnBarcodeChanged(string barcode)
    {
        ClearLabels(); // ENSURE THE BARCODE LABELS ARE CLEAR BEFORE BEGINNING

        if (barcode.Length == 13)
        {
            // BREAK DOWN THE BARCODE INFO FOR DISPLAY
            BarcodePrefix prefix = (BarcodePrefix)int.Parse(barcode.Substring(0, 1));
            BarcodeSuffix suffix = (BarcodeSuffix)int.Parse(barcode.Substring(9, 2));
            BarcodePlus length = (BarcodePlus)int.Parse(barcode.Substring(11, 2));
            string numLen = length.ToString().Substring(6);

            // PARSE BARCODE DATE DATA
            try
            {
                int year = int.Parse(barcode.Substring(1, 4));
                int nm = int.Parse(barcode.Substring(5, 2));
                int nd = int.Parse(barcode.Substring(7, 2));
                var date = new DateOnly(year, nm, nd);

                item = new();
                item.Prefix = prefix.ToString();
                item.Suffix = suffix.ToString();
                item.Plus = length.ToString();
                item.Date = date;
                item.FullBarcode = barcode;

                // CHECK IF AUTO INPUT IS ENABLED
                if (AutoScanSwitchedOn)
                {
                    // Add barcode to the list
                    await UpdateItemCount(item);

                    // Clear barcode field and reset the value
                    if (barcodeField != null) await ResetBarcodeField();
                }
                else
                {
                    // POULATE THE DATA FOR SCREEN
                    ItemName = prefix.ToString();
                    ItemType = suffix.ToString();
                    ItemLength = $"{numLen[..^1]}.{numLen[^1]}'"; // EXTRACT AND FORMAT JUST THE NUMERIC PART
                    ItemDate = date.ToString();

                    // FOCUS ON THE COUNT FIELD
                    if (barcodeCountField != null)
                    {
                        await barcodeCountField.BlurAsync();
                        await barcodeCountField.FocusAsync();
                        await InvokeAsync(StateHasChanged); // ENSURE UI REFRESH
                    }
                }
            }
            catch
            {
                await DisableCountField();
                Snackbar!.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar?.Add("You have entrd an invalid barcode. Please try again.", Severity.Error);
            }
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="count"></param>
    private void OnBarcodeCountChanged(int? count)
    {
        BarcodeCount = count ?? 0;
        if (count.HasValue && count > 0 && !string.IsNullOrEmpty(barcodeCountField?.Text))
            enterButtonDisabled = false;
        else
            enterButtonDisabled = true;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public async Task UpdateItemCount(BarcodeInformation item)
    {
        var itemExists = AuditList.Find(i => i.FullBarcode == item.FullBarcode);
        if (itemExists == null)
        {
            item.Count = 1;
            AuditList.Add(item);
        }
        else
            itemExists.Count++;
        await Task.CompletedTask;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public async Task UpdateItemCountManual(BarcodeInformation item)
    {
        var itemExists = AuditList.Find(i => i.FullBarcode == item.FullBarcode);
        if (itemExists == null)
        {
            item.Count = BarcodeCount;
            AuditList.Add(item);
        }
        else
        {
            itemExists.Count += BarcodeCount;
        }
        await Task.CompletedTask;
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task DisableCountField()
    {
        ItemDate = "NA";
        enterButtonDisabled = true;
        await barcodeField!.FocusAsync();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    private void OnIncrementSwitchChanged(bool value)
    {
        IncrementSwitchedOn = value;
        IncrementSwitchText = value ? "Increment" : "Decrement";
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="value"></param>
    private async void OnAutoScanSwitchChanged(bool value)
    {
        ClearLabels();
        AutoScanSwitchedOn = value;
        AutoScanSwitchText = value ? "Auto Scan" : "Manual Input";
        await ResetBarcodeField();
    }

    /// <summary>
    ///
    /// </summary>
    private void ClearLabels()
    {
        // RESET THE LABEL TEXT
        ItemName = string.Empty;
        ItemType = string.Empty;
        ItemLength = string.Empty;
        ItemDate = "NA";
        InvokeAsync(StateHasChanged); // ENSURE UI REFRESH
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task ResetBarcodeField()
    {
        barcodeField!.Value = string.Empty; // CLEAR THE INPUT VALUE DIRECTLY (MUDBLAZOR ISSUE)
        await barcodeField.SetText(string.Empty); // CLEAR THE INPUT FIELD
        await barcodeField.BlurAsync(); // FORCE THE FIELD TO LOSE FOCUS
        await barcodeField.FocusAsync(); // OPTIONALLY REFOCUS THE INPUT FIELD
        await InvokeAsync(StateHasChanged); // ENSURE UI REFRESH
    }
}