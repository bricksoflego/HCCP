@using BlueDragon.Data
@inject ISnackbar Snackbar

<MudPaper>
    <MudCard Style="border:1px solid black;">
        <MudCardHeader>Audit Input</MudCardHeader>
        <MudElement Style="display:inline;">
            <MudText Inline="true"><strong>Name: </strong>@ItemName | </MudText>
            <MudText Inline="true"><strong>Type: </strong>@ItemType | </MudText>
            @*<MudText Inline="true"><strong>Count: </strong>@ItemCount | </MudText>*@
            <MudText Inline="true"><strong>Length: </strong>@ItemLength | </MudText>
            <MudText Inline="true"><strong>Date: </strong>@ItemDate</MudText>
        </MudElement>
        <LineBreak />
        <MudDivider />
        <LineBreak />
        <MudTextField T="string" InputId="barcode"
                      Value="@Barcode"
                      ValueChanged="@(context => OnBarcodeChanged(context))"
                      Immediate="true"
                      MaxLength="13"
                      Label="Barcode"
                      Style="width:13em"
                      @ref="barcodeField">
        </MudTextField>
        <LineBreak />
        <MudTextField T="int?" InputId="barcodeCount"
                      Value="@BarcodeCount"
                      Immediate="true"
                      Label="Count"
                      Style="width:3em"
                      OnKeyUp="CheckForEmptyCount"
                      @ref="barcodeCountField">
        </MudTextField>
        <LineBreak />
        <MudCardActions>
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       Disabled="@enterButtonDisabled">
                Enter
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudPaper>

@code {
    private string Barcode { get; set; } = string.Empty;
    private int? BarcodeCount { get; set; }
    private string ItemName { get; set; } = string.Empty;
    private string ItemType { get; set; } = string.Empty;
    private string ItemLength { get; set; } = string.Empty;
    private string ItemDate { get; set; } = "NA";
    private bool enterButtonDisabled = true;
    private MudTextField<string>? barcodeField;
    private MudTextField<int?>? barcodeCountField;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && barcodeField != null)
            // SET FOCUS ON THE BARCODE FIELD AFTER THE COMPONENT IS FIRST RENDERED
            await barcodeField.FocusAsync();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="barcode"></param>
    /// <returns></returns>
    private async Task OnBarcodeChanged(string barcode)
    {
        Barcode = barcode;
        if (barcode.Length == 13)
        {
            // BREAK DOWN THE BARCODE INFO FOR DISPLAY
            BarcodePrefix prefix = (BarcodePrefix)int.Parse(barcode.Substring(0, 1));
            BarcodeSuffix suffix = (BarcodeSuffix)int.Parse(barcode.Substring(9, 2));
            BarcodePlus length = (BarcodePlus)int.Parse(barcode.Substring(11, 2));
            string numLen = length.ToString().Substring(6);

            // PARSE BARCODE DATE
            int year = int.Parse(barcode.Substring(1, 4));
            int nm = int.Parse(barcode.Substring(5, 2));
            int nd = int.Parse(barcode.Substring(7, 2));
            var date = new DateTime(year, nm, nd);

            // POULATE THE DATA
            ItemName = prefix.ToString();
            ItemType = suffix.ToString();
            ItemLength = $"{numLen[..^1]}.{numLen[^1]}'"; // EXTRACT AND FORMAT JUST THE NUMERIC PART
            ItemDate = date.ToString("MM-dd-yyyy");

            // FOCUS ON THE COUNT FIELD
            if (barcodeCountField != null)
                await barcodeCountField.FocusAsync();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task CheckForEmptyCount()
    {
        if (barcodeCountField?.Text != "")
            enterButtonDisabled = false;
        else
            enterButtonDisabled = true;

        await Task.CompletedTask;
    }
}